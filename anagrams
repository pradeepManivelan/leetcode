Given a string s and a non-empty string p, find all the start indices of p's anagrams in s.

Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.

The order of output does not matter.

Example 1:

Input:
s: "cbaebabacd" p: "abc"

Output:
[0, 6]

Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".
Example 2:

Input:
s: "abab" p: "ab"

Output:
[0, 1, 2]

Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".


class Solution {
    public List<Integer> findAnagrams(String s, String p) {
        int m = s.length(), n = p.length();
        
        if(n > m) return new ArrayList<Integer>();
        
        int[] count_array = new int[26];
        
        List<Integer> list1 = new ArrayList<>();
        
        for(int i = 0;i <n;i++){
            count_array[s.charAt(i) - 'a']++;
            count_array[p.charAt(i) - 'a']--;
        }
            
        for(int i = n;i < m;i++){
            if(allZeros(count_array)){
                list1.add(i-n);
            }
            count_array[s.charAt(i) - 'a']++;
            count_array[s.charAt(i-n) - 'a']--;
        }
        
        if(allZeros(count_array)){
            list1.add(m-n);
        }
        
        return list1; 
    }
    
    boolean allZeros(int[] count_array){
        for(int i = 0;i < 26;i++){
            if(count_array[i] != 0) return false;
        }return true;
    }
}
