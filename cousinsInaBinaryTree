In a binary tree, the root node is at depth 0, and children of each depth k node are at depth k+1.

Two nodes of a binary tree are cousins if they have the same depth, but have different parents.

We are given the root of a binary tree with unique values, and the values x and y of two different nodes in the tree.

Return true if and only if the nodes corresponding to the values x and y are cousins.

 

Example 1:


Input: root = [1,2,3,4], x = 4, y = 3
Output: false

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    class ResultPair{
        TreeNode parent;
        int level;
        ResultPair(TreeNode parent, int level){
            this.parent = parent;
            this.level = level;
        }
    }
    
    
    public boolean isCousins(TreeNode root, int x, int y) {
        ResultPair pair1 = isCousinsSub(root, x, null, 0);
        ResultPair pair2 = isCousinsSub(root, y, null, 0);
        
        if(pair1.level == pair2.level && pair1.parent != pair2.parent){
            return true;
        }return false;
        
    }
    
    
    ResultPair isCousinsSub(TreeNode root, int val, TreeNode parent, int level){
        if(root == null) return null;
        if(root.val == val) return new ResultPair(parent, level);
        else{
            //System.out.println(root.left.val);
            ResultPair leftPair = isCousinsSub(root.left, val, root, level+1);
            ResultPair rightPair = isCousinsSub(root.right, val, root, level+1);
            return (leftPair == null) ? rightPair : leftPair;
        }
    }
}
