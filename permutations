Given two strings s1 and s2, write a function to return true if s2 contains the permutation of s1. In other words, one of the first string's permutations is the substring of the second string.

 

Example 1:

Input: s1 = "ab" s2 = "eidbaooo"
Output: True
Explanation: s2 contains one permutation of s1 ("ba").
Example 2:

Input:s1= "ab" s2 = "eidboaoo"
Output: False

class Solution {
    public boolean checkInclusion(String s1, String s2) {
        int m = s1.length(),n = s2.length();
        if(n < m) return false;
        
        int[] count_array = new int[26];
        
        for(int i = 0;i < m;i++){
            count_array[s1.charAt(i) - 'a']++;  
            count_array[s2.charAt(i) - 'a']--; 
        }
        
        for(int i = m;i < n;i++){
            //count_array[s2.charAt(i) - 'a'] += 1;
            
            if(allZeros(count_array)) return true;
            
            count_array[s2.charAt(i) - 'a']--;
            count_array[s2.charAt(i-m) - 'a']++;
        }
        if(allZeros(count_array)) return true;
        return false;
        
    }
    
    boolean allZeros(int[] count_array){
        for(int i = 0;i < 26;i++){
            if(count_array[i] != 0) return false;
        }return true;
    }
}
